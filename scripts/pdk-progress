#!/usr/bin/env python3
"""Textual progress meter, converts stdin into dots.
Usefull to make chatty scripts less chatty.

EPILOG:
Example:
    # convert 40 chars into 1 dot
    script | pdk-progress -f char -s 40

Example:
    make | tee logs.txt | pdk-progress

"""

import pydevkit.log.config  # noqa: F401
from pydevkit.log import prettify
from pydevkit.argparse import ArgumentParser
import sys

import logging

log = logging.getLogger(__name__)


class Dots:
    def __init__(self, ilen, olen):
        self.ilen = ilen
        self.ileft = 0
        self.olen = olen
        self.opos = 0

    def show(self, ilen):
        ilen += self.ileft
        ndots = ilen / self.ilen
        ndots = int(ndots)
        self.ileft = ilen % self.ilen
        rc = ""
        while ndots > 0:
            left_in_row = self.olen - self.opos
            if left_in_row > ndots:
                rc += "." * ndots
                self.opos += ndots
                ndots = 0
            else:
                rc += "." * left_in_row + "\n"
                self.opos = 0
                ndots -= left_in_row
        print(rc, end="")
        sys.stdout.flush()

    def finish(self):
        rc = "." if self.ileft else ""
        print(rc)


def filter_none(Args):
    for line in sys.stdin:
        print(line, end="")


def filter_line(Args):
    d = Dots(Args.scale, Args.length)
    for line in sys.stdin:
        d.show(1)
    d.finish()


def filter_char(Args):
    d = Dots(Args.scale, Args.length)
    for line in sys.stdin:
        d.show(len(line))
    d.finish()


filters = {"char": filter_char, "line": filter_line, "none": filter_none}

defaults = {"filter": "char", "length": 80, "scale": 10}


def get_args():
    p = ArgumentParser(_help=__doc__)
    p.add_argument(
        "-f",
        "--filter",
        help="filter to apply: %(choices)s",
        choices=filters.keys(),
        metavar="name",
        default=defaults["filter"],
    )
    p.add_argument(
        "-s",
        "--scale",
        help="print a dot every num units",
        metavar="num",
        type=int,
        default=defaults["scale"],
    )
    p.add_argument(
        "-l",
        "--length",
        help="progress bar length",
        metavar="num",
        type=int,
        default=defaults["length"],
    )

    Args, UnknownArgs = p.args_resolve()
    if UnknownArgs and UnknownArgs[0] == "--":
        del UnknownArgs[0]
    log.debug("Args: %s", prettify(vars(Args)))
    log.debug("UnknownArgs: %s", UnknownArgs)
    return Args, UnknownArgs


def main():
    Args, UnknownArgs = get_args()
    func = filters[Args.filter]
    func(Args)


if __name__ == "__main__":
    main()
