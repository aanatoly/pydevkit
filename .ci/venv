#!/bin/bash

# Run pythoon scripts in virtual environments
#
# usage: venv [--name=NAME] command [arguemnts]
#
# Options
#  --name=NAME   name of venv, defailt is "dev"
#  --debug=ARG   enable debug prints, "yes" or "no", default is "no"
#  --py          python to use, default is "python3"
#
# Commands:
#   init  - create venv and install packages. You can run this command
#           multiple times to install more packages. Packages should be
#           specified in pip format, eg "-r requirements.txt pkg1 pkg2"
#
#   run   - run script in a venv
#   list  - list venvs
#
# Environment variables:
#   PYTHON  - python to use, default is "python3", same as '--py'
#
# Examples:
#   # create venv and install packages from requirements.txt
#   venv --name=dev init -r requirements.txt
#   # install more packages to existing 'dev' venv
#   venv --name=dev init flake8
#   # run flake8
#   venv --name=dev run flake8 src/
#
#   # list venvs
#   venv list

# Declared command line options
ARG_DEBUG=
ARG_NAME=dev
ARG_PY=


# {{{ logging
PROG="${0##*/}"
declare -A _fmt=(
[dbg]="\e[33;1m$PROG\e[0m: %s"
[msg]="\e[33;1m$PROG\e[0m: \e[1m%s\e[0m"
[err]="\e[32;1m$PROG\e[0m: %s"
)

_log()
{
    printf "$1\n" "$2" >&2
}


err()
{
    _log "${_fmt[err]}" "$1"
}


msg() {
    _log "${_fmt[msg]}" "$1"
}


dbg() {
    [[ "$ARG_DEBUG" == "yes" ]] || return 0
    _log "${_fmt[dbg]}" "$1"
}


# }}}

# {{{ argument parsing

usage()
{
    # prints first paragraph, which is main comment block
    cat $0 | sed -n '2,/^$/ p' | sed -e 's/^#[[:space:]]\?//'
}


set_var()
{
    local name="${1%%=*}"
    oname="${name//-/_}"
    oname="ARG_${oname^^}"
    if [[ -z "$(compgen -v $oname)" ]]; then
        echo  "unexpected argument: $name" >&2
        exit 1
    fi
    local value="${1#*=}"
    eval "$oname=\"$value\""
}

declare -a ARG_ARGS

argparse()
{
    while [[ $# -gt 0 ]]; do
        case "$1" in
            -h|--help)
                usage
                exit 0
                ;;
            --)
                shift
                break
                ;;
            --*=*)
                set_var "${1:2}"
                ;;
            *)
                break
                ;;
        esac
        shift
    done
    ARG_ARGS=( "$@" )
    [[ -z "$ARG_DEBUG" ]] || argparse_dbg
}


argparse_dbg()
{
    echo "Options:"
    for arg in $(compgen -v ARG_ | grep -v ARG_ARGS ); do
        echo "$arg='${!arg}'"
    done
    echo "ARG_ARGS=(${ARG_ARGS[@]})"
    echo
}

# }}}

set -e


main() {
    if [ -z "$ARG_PY" -a -n "$PYTHON" ]; then
        ARG_PY="$PYTHON"
    fi
    if [ -z "$ARG_PY" ]; then
        ARG_PY="python3"
    fi
    dbg "python: $ARG_PY"

    cmd="$1"
    shift

    if [ "$cmd" == "list" ]; then
        find .venv -maxdepth 2 -mindepth 2 2>/dev/null
        exit
    fi

    vdir=".venv/py-`$ARG_PY --version | sed -e 's/.*\s\+//'`/$ARG_NAME"
    if [ "$cmd" == "dir" ]; then
        echo "$vdir"
        exit
    fi

    msg "venv: $vdir"
    if [ "$cmd" == "init" ]; then
        if ! [ -d "$vdir" ]; then
            msg "create venv"
            $ARG_PY -m venv "$vdir"
            $vdir/bin/pip install -U pip setuptools wheel
        fi
        if [ $# -gt 0 ]; then
            msg "install $*"
            $vdir/bin/pip install -f wheels/ "$@"
        fi
        exit
    fi

    if [ "$cmd" == "run" ]; then
        . $vdir/bin/activate
        if [ $# -gt 0 ]; then
            msg "run $*"
            eval "$@"
        else
            msg "run shell"
            bash
        fi
    fi
}


argparse "$@"
main "${ARG_ARGS[@]}"
